package compiler

import (
	"fmt"

	"github.com/skatsuta/monkey-compiler/ast"
	"github.com/skatsuta/monkey-compiler/code"
	"github.com/skatsuta/monkey-compiler/object"
)

// Compiler is a bytecode compiler.
type Compiler struct {
	// insns holds the generated bytecode.
	insns code.Instructions
	// consts is a slice that serves as a constant pool.
	consts []object.Object
}

// New returns a new Compiler.
func New() *Compiler {
	return &Compiler{
		insns:  make(code.Instructions, 0),
		consts: make([]object.Object, 0),
	}
}

// Compile compiles an AST node to a bytecode.
func (c *Compiler) Compile(node ast.Node) error {
	switch node := node.(type) {
	case *ast.Program:
		for _, s := range node.Statements {
			if err := c.Compile(s); err != nil {
				return err
			}
		}

	case *ast.ExpressionStatement:
		if err := c.Compile(node.Expression); err != nil {
			return err
		}

		c.emit(code.OpPop)

	case *ast.InfixExpression:
		if err := c.Compile(node.Left); err != nil {
			return err
		}

		if err := c.Compile(node.Right); err != nil {
			return err
		}

		switch node.Operator {
		case "+":
			c.emit(code.OpAdd)
		case "-":
			c.emit(code.OpSub)
		case "*":
			c.emit(code.OpMul)
		case "/":
			c.emit(code.OpDiv)
		default:
			return fmt.Errorf("unknown operator: %s", node.Operator)
		}

	case *ast.IntegerLiteral:
		integer := &object.Integer{Value: node.Value}
		c.emit(code.OpConstant, c.addConstant(integer))
	}

	return nil
}

// addConstant adds a constant object to the compiler's constant pool and returns an identifier
// for the constant.
func (c *Compiler) addConstant(obj object.Object) (id int) {
	c.consts = append(c.consts, obj)
	return len(c.consts) - 1
}

// emit generates a bytecode corresponding to `op` and `operands`, adds it to the compiler's
// internal bytecode instruction sequence and returns the starting position of the instruction.
func (c *Compiler) emit(op code.Opcode, operands ...int) (pos int) {
	insn := code.Make(op, operands...)
	pos = c.addInstruction(insn)
	return pos
}

func (c *Compiler) addInstruction(insn []byte) (pos int) {
	pos = len(c.insns)
	c.insns = append(c.insns, insn...)
	return pos
}

// Bytecode returns a bytecode generated by the compiler.
func (c *Compiler) Bytecode() *Bytecode {
	return &Bytecode{
		Instructions: c.insns,
		Constants:    c.consts,
	}
}

// Bytecode represents a bytecode.
type Bytecode struct {
	Instructions code.Instructions
	Constants    []object.Object
}
